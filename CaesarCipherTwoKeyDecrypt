import edu.duke.*;

public class TwoKeyDecrypt {
    
    public String encrypt(String input, int key){
        StringBuilder sb = new StringBuilder(input);
        //StringBuilder is faster than just purely iterating and concatenating
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        //generate shifted alphabet
        String alphaSubstring = alphabet.substring(key);
        String shiftedAlpha = alphaSubstring + alphabet.substring(0,key);
        
        int i=0;
        int idx=0;
        
       for (i=0; i < sb.length(); i++){
            char oldChar = sb.charAt(i);
            if (Character.isLowerCase(oldChar)){
                oldChar = Character.toUpperCase(oldChar);
                idx = alphabet.indexOf(oldChar);
                if (idx != -1){
                    char newChar = shiftedAlpha.charAt(idx);
                    newChar = Character.toLowerCase(newChar);
                    sb.setCharAt(i, newChar); //replaces existing char with newone
            }
       }
            else{
                idx = alphabet.indexOf(oldChar);
                if (idx != -1){
                    char newChar = shiftedAlpha.charAt(idx);
                    sb.setCharAt(i, newChar);
                }
            }
        }
        
                 
       return sb.toString();
        

    }
  
    public String encryptTwoKeys(String input, int key1, int key2){
      StringBuilder sb = new StringBuilder(input);
      int i = 0;
      int idx = 0;
      
      String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      String shiftedAlpha1 = alphabet.substring(key1) + alphabet.substring(0,key1);
      String shiftedAlpha2 = alphabet.substring(key2) + alphabet.substring(0,key2);
      
      for (i=0; i < sb.length(); i++){
          char oldChar = sb.charAt(i);
          
          if (Character.isLowerCase(oldChar)){
              oldChar = Character.toUpperCase(oldChar);
              idx = alphabet.indexOf(oldChar);
              if (idx != -1); //need to include this, because there could be some characters that are not alphabets
                if ((i+1)%2 ==0){
                  
                  char newChar = shiftedAlpha2.charAt(idx);
                  newChar = Character.toLowerCase(newChar);
                  sb.setCharAt(i, newChar);
                }
                else{
                  
                  char newChar = shiftedAlpha1.charAt(idx);
                  newChar = Character.toLowerCase(newChar);
                  sb.setCharAt(i,newChar);
                }
            }
          else{
              idx = alphabet.indexOf(oldChar);
              if (idx != -1){
                  if ((i+1)%2 ==0){

                      char newChar = shiftedAlpha2.charAt(idx);
                      sb.setCharAt(i, newChar);
                    }
                    else{
                        char newChar = shiftedAlpha1.charAt(idx);
                        sb.setCharAt(i, newChar);
                    }
                }
            }
            
        }
        return sb.toString();
    }
    
       
    public int countMax(int[] countAlpha){
        int maxIdx = 0;
        for (int i = 0; i < countAlpha.length; i++){
            if (countAlpha[i] > countAlpha[maxIdx]){
                maxIdx = i;
            }
        }
        return maxIdx;
    }
    
    public String decrypted(String encrypted){
        int [] alpha = new int[26];
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for (int i = 0; i<encrypted.length(); i++){
            char ch = encrypted.charAt(i);
            char upperCh = Character.toUpperCase(ch);
            int idx = alphabet.indexOf(upperCh);
            if (idx != -1){
                alpha[idx] += 1;
            }
        }
        //find character with max number of counts
        int maxIdx = countMax(alpha);
        //        assume 'e' is the most commonly occuring character, which  has an index of 4
        int decryptKey=0;
        if (maxIdx < 4){
            decryptKey = 26 + (maxIdx - 4);
        }
        else{
            decryptKey = maxIdx - 4;
        }
        
        String decryptedOutput = encrypt(encrypted, decryptKey);
        
        return decryptedOutput;

    }
    
    public void testDecrypted(){
        String s = "Gwpv c vbuq pvokki yfve iqqu qc bgbgbgbgbgbgbgbgbu";
        String decrypt = decrypted(s);
        System.out.println(decrypt);
    }
    
}
